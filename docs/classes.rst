Key Classes
===========

Explains the key classes used by `Pyotter` in the `otter.core` package.

`otter.core.events._Event`
--------------------------

All events defined by `Pyotter` implement the :class:`otter.core.events._Event`
abstract base class. In particular, the abstract method :meth:`otter.core.events._Event.update_chunks`
is implemented by concrete event classes to control how an event updates
the chunks in which it participates. Overriding the :meth:`otter.core.events._Event.get_task_data`
method allows events to expose attributes to task instances for events where it
makes sense to do so.

Various mixin classes add further logic to subsets of event classes.

`otter.core.events.EventFactory`
--------------------------------

Events are not created directly, but are instead generated by an
:class:`otter.core.events.EventFactory` object as it iterates over the events
in an OTF2 trace.

`otter.core.tasks`
------------------

Individual tasks are represented by :class:`otter.core.tasks.Task` and they are
collected together in a :class:`otter.core.tasks.TaskRegistry`

`otter.core.chunks`
-------------------

Represents and registers chunks.
